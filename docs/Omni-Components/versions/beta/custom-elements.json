{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/button/Button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-button\n        data-testid=\"test-button\"\n        type=\"${args.type}\"\n        label=\"${ifNotEmpty(args.label)}\"\n        slot-position=\"${args.slotPosition}\"\n        ?disabled=${args.disabled}>\n        ${unsafeHTML(args.slot)}\n    </omni-button>\n  `,\n    name: 'Interactive',\n    args: {\n        type: 'secondary',\n        label: 'Button',\n        slotPosition: 'top',\n        disabled: false,\n        slot: raw`<omni-icon icon=\"@material/thumb_up\"></omni-icon>`\n    },\n    play: async (context: StoryContext) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const click = jest.fn();\n        button.addEventListener('click', () => click());\n        await userEvent.click(button);\n        await userEvent.click(button);\n        await expect(click).toBeCalledTimes(2);\n    },\n}"
        },
        {
          "kind": "variable",
          "name": "Type",
          "type": {
            "text": "object"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-button type=\"${args.type}\" label=\"${args.label}\" data-testid=\"test-button\"></omni-button>\n  `,\n    name: 'Type',\n    args: {\n        type: 'primary',\n        label: 'Click',\n    },\n    play: async (context: StoryContext) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const buttonElement = button.shadowRoot.getElementById('button');\n        const foundPrimaryClass = buttonElement.classList.contains('primary');\n        await expect(foundPrimaryClass).toBeTruthy();\n    },\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "object"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-button label=\"${args.label}\" data-testid=\"test-button\"></omni-button>\n  `,\n    name: 'Label',\n    args: {\n        label: 'Click',\n    },\n    play: async (context: StoryContext) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const labelElement = button.shadowRoot.getElementById('label');\n        const labelMatches = labelElement.innerText === Label.args.label;\n        await expect(labelMatches).toBeTruthy();\n    },\n}"
        },
        {
          "kind": "variable",
          "name": "Slot",
          "type": {
            "text": "object"
          },
          "default": "{\n    render: () => html`\n    <omni-button data-testid=\"test-button\">\n      <omni-icon size=\"default\" icon=\"assets/direction.svg\"></omni-icon>\n    </omni-button>\n  `,\n    name: 'Slot',\n    args: {},\n    play: async (context: StoryContext) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const slotElement = button.shadowRoot.querySelector('slot');\n        const foundSlottedOmniIconElement = slotElement\n            .assignedElements()\n            .find((e) => e.tagName.toLowerCase() === 'omni-icon');\n        await expect(foundSlottedOmniIconElement).toBeTruthy();\n    },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "object"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-button disabled label=\"${args.label}\" data-testid=\"test-button\"></omni-button>\n  `,\n    name: 'Disabled',\n    args: {\n        label: 'Disabled',\n    },\n    play: async (context: StoryContext) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button'); // Test for disabled CSS.\n\n        const buttonElement = button.shadowRoot.getElementById('button');\n        const foundDisabledClass = buttonElement.classList.contains('disabled');\n        await expect(foundDisabledClass).toBeTruthy(); // Test for not clickable.\n\n        const click = jest.fn();\n        button.addEventListener('click', () => click());\n        await userEvent.click(button);\n        await userEvent.click(button);\n        await expect(click).toBeCalledTimes(0);\n    },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Type",
          "declaration": {
            "name": "Type",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/button/Button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A control that allows an action to be executed.\n\n```js \nimport '@capitec/omni-components/button'; \n```",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Component font family.",
              "name": "--omni-button-font-family"
            },
            {
              "description": "Component font size.",
              "name": "--omni-button-font-size"
            },
            {
              "description": "Component font weight.",
              "name": "--omni-button-font-weight"
            },
            {
              "description": "Component line height.",
              "name": "--omni-button-line-height"
            },
            {
              "description": "Component border radius.",
              "name": "--omni-button-border-radius"
            },
            {
              "description": "Component padding top.",
              "name": "--omni-button-padding-top"
            },
            {
              "description": "Component padding bottom.",
              "name": "--omni-button-padding-bottom"
            },
            {
              "description": "Component padding left.",
              "name": "--omni-button-padding-left"
            },
            {
              "description": "Component padding right.",
              "name": "--omni-button-padding-right"
            },
            {
              "description": "Primary \"type\" background color.",
              "name": "--omni-button-primary-background-color"
            },
            {
              "description": "Primary \"type\" border color.",
              "name": "--omni-button-primary-border-color"
            },
            {
              "description": "Primary \"type\" border width.",
              "name": "--omni-button-primary-border-width"
            },
            {
              "description": "Primary \"type\" color.",
              "name": "--omni-button-primary-color"
            },
            {
              "description": "Primary \"type\" active back color.",
              "name": "--omni-button-primary-active-background-color"
            },
            {
              "description": "Secondary \"type\" background color.",
              "name": "--omni-button-secondary-background-color"
            },
            {
              "description": "Secondary \"type\" border color.",
              "name": "--omni-button-secondary-border-color"
            },
            {
              "description": "Secondary \"type\" border width.",
              "name": "--omni-button-secondary-border-width"
            },
            {
              "description": "Secondary \"type\" color.",
              "name": "--omni-button-secondary-color"
            },
            {
              "description": "Secondary \"type\" active background color.",
              "name": "--omni-button-secondary-active-background-color"
            },
            {
              "description": "Clear \"type\" background color.",
              "name": "--omni-button-clear-background-color"
            },
            {
              "description": "Clear \"type\" border color.",
              "name": "--omni-button-clear-border-color"
            },
            {
              "description": "Clear \"type\" border width.",
              "name": "--omni-button-clear-border-width"
            },
            {
              "description": "Clear \"type\" color.",
              "name": "--omni-button-clear-color"
            },
            {
              "description": "Clear \"type\" hover background color.",
              "name": "--omni-button-clear-hover-background-color"
            },
            {
              "description": "Clear \"type\" active background color.",
              "name": "--omni-button-clear-active-background-color"
            },
            {
              "description": "Clear \"type\" active border color.",
              "name": "--omni-button-clear-active-border-color"
            },
            {
              "description": "Clear \"type\" active border width.",
              "name": "--omni-button-clear-active-border-width"
            },
            {
              "description": "White \"type\" background color.",
              "name": "--omni-button-white-background-color"
            },
            {
              "description": "White \"type\" border color.",
              "name": "--omni-button-white-border-color"
            },
            {
              "description": "White \"type\" border width.",
              "name": "--omni-button-white-border-width"
            },
            {
              "description": "White \"type\" color.",
              "name": "--omni-button-white-color"
            },
            {
              "description": "White \"type\" hover background color.",
              "name": "--omni-button-white-hover-background-color"
            },
            {
              "description": "White \"type\" active background color.",
              "name": "--omni-button-white-active-background-color"
            },
            {
              "description": "White \"type\" active border color.",
              "name": "--omni-button-white-active-border-color"
            },
            {
              "description": "White \"type\" active border width.",
              "name": "--omni-button-white-active-border-width"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-button-disabled-border-color"
            },
            {
              "description": "Disabled background color.",
              "name": "--omni-button-disabled-background-color"
            },
            {
              "description": "Disabled active background color.",
              "name": "--omni-button-disabled-active-hover-background-color"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-right"
            },
            {
              "description": "Slot margin bottom (When positioned top of label).",
              "name": "--omni-button-slot-margin-bottom"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-left"
            },
            {
              "description": "Slot margin top (When positioned bottom of label).",
              "name": "--omni-button-slot-margin-top"
            }
          ],
          "slots": [
            {
              "description": "Content to render inside button, can be positioned using {@link slotPosition} property.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slotPosition",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "attribute": "slot-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "slot-position",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "fieldName": "slotPosition",
              "attribute": "slot-position"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/button/Button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-button",
          "declaration": {
            "name": "Button",
            "module": "src/button/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${ifNotEmpty(args.label)}\" .data=\"${args.data}\" hint=\"${ifNotEmpty(args.hint)}\" error=\"${ifNotEmpty(args.error)}\" ?checked=\"${args.checked}\" ?disabled=\"${args.disabled}\" ?indeterminate=\"${args.indeterminate}\">${(args.indeterminate_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('indeterminate_icon',args.indeterminate_icon))}` : nothing)}${(args.check_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('check_icon',args.check_icon))}` : nothing)}${args.check_icon || args.indeterminate_icon ? '\\r\\n' : nothing}</omni-check>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    label: '',\n    data: {},\n    hint: '',\n    error: '',\n    checked: false,\n    disabled: false,\n    indeterminate: false,\n    check_icon: '',\n    indeterminate_icon: '',\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const valueChange = jest.fn();\n      check.addEventListener('value-change', valueChange);\n      await userEvent.click(check);\n\n      const content = check.shadowRoot.getElementById('content');\n    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n      await expect(valueChange).toBeCalledTimes(2);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\"></omni-check>\n  `,\n  args: {\n    label: 'Label'\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const labelElement = check.shadowRoot.querySelector('label');\n      await expect(labelElement).toBeTruthy();\n      await expect(labelElement).toHaveTextContent(Label.args.label);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-check>\n  `,\n  args: {\n    label: 'Hint',\n    hint: 'This is a hint'\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const hintElement = check.shadowRoot.querySelector<HTMLElement>('.hint');\n      await expect(hintElement).toBeTruthy();\n      await expect(hintElement).toHaveTextContent(Hint.args.hint);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" error=\"${args.error}\"></omni-check>\n  `,\n  args: {\n    label: 'Error',\n    error: 'This is an error state'\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const errorElement = check.shadowRoot.querySelector<HTMLElement>('.error');\n      await expect(errorElement).toBeTruthy();\n      await expect(errorElement).toHaveTextContent(Error.args.error);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-check>\n  `,\n  args: {\n    label: 'Checked',\n    checked: true\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const checkedElement = check.shadowRoot.querySelector<HTMLElement>('.checked');\n      await expect(checkedElement).toBeTruthy();\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Indeterminate",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\"></omni-check>\n  `,\n  args: {\n    label: 'Indeterminate',\n    indeterminate: true,\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const indeterminateElement = check.shadowRoot.querySelector<HTMLElement>('.indeterminate');\n      await expect(indeterminateElement).toBeTruthy();\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-check>\n  `,\n  args: {\n    label: 'Disabled',\n    disabled: true,\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const valueChange = jest.fn();\n      check.addEventListener('value-change', valueChange);\n\n      const disabledElement = check.shadowRoot.querySelector<HTMLElement>('.disabled');\n      await expect(disabledElement).toBeTruthy();\n      \n      const content = check.shadowRoot.getElementById('content');\n      await userEvent.click(content);    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n      await expect(valueChange).toBeCalledTimes(0);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CustomCheckIcon",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\">\n      ${unsafeHTML(args.check_icon)} \n    </omni-check>\n  `,\n  args: {\n    label: 'Custom Check Icon',\n    checked: true,\n    check_icon: raw`<svg slot=\"check_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.79 410.38\" version=\"1.0\" width=\"100%\"\n                      height=\"100%\">\n                      <path style=\"stroke:#000;stroke-width:19.892;fill:#ffffff\"\n                        d=\"m-1747.2-549.3 287.72 333.9c146.6-298.83 326.06-573.74 614.52-834.75-215.89 121.82-453.86 353.14-657.14 639.38l-245.1-138.53z\"\n                        transform=\"translate(843.77 509.04) scale(.48018)\" />\n                    </svg>`,\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const slotElement = check.shadowRoot.querySelector<HTMLSlotElement>('slot[name=check_icon]');\n      await expect(slotElement).toBeTruthy();\n\n      const foundSlottedSvgElement = slotElement\n          .assignedElements()\n          .find((e) => e.tagName.toLowerCase() === 'svg');\n      await expect(foundSlottedSvgElement).toBeTruthy();\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CustomIndeterminateIcon",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\">\n      ${unsafeHTML(args.indeterminate_icon)}\n    </omni-check>\n  `,\n  args: {\n    label: 'Custom Indeterminate Icon',\n    indeterminate: true,\n    indeterminate_icon: raw`<svg slot=\"indeterminate_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n                              <defs>\n                                <linearGradient id=\"b\" y2=\"28.275\" gradientUnits=\"userSpaceOnUse\" x2=\"20.07\" y1=\"3.976\" x1=\"12.113\">\n                                  <stop style=\"stop-color:#ffffff\" offset=\"0\" />\n                                  <stop style=\"stop-color:#ffffff\" offset=\"1\" />\n                                </linearGradient>\n                                <linearGradient id=\"a\" y2=\"30\" gradientUnits=\"userSpaceOnUse\" x2=\"20.214\" y1=\"2\" x1=\"12.031\">\n                                  <stop style=\"stop-color:#ffffff\" offset=\"0\" />\n                                  <stop style=\"stop-color:#ffffff\" offset=\"1\" />\n                                </linearGradient>\n                              </defs>\n                              <path d=\"M2.875 13C1.281 13 0 14.338 0 16s1.28 3 2.875 3h26.25C30.719 19 32 17.662 32 16s-1.281-3-2.875-3H2.875z\" />\n                              <path style=\"fill:url(#b)\" transform=\"translate(-.063 .063)\"\n                                d=\"M2.875 13.938c-1.067 0-1.938.884-1.938 2.062s.87 2.062 1.938 2.062h26.25c1.067 0 1.937-.884 1.937-2.062s-.87-2.062-1.937-2.062H2.875z\" />\n                            </svg>`,\n  },\n  play: async (context: StoryContext) => {\n      const check = within(context.canvasElement).getByTestId<Check>('test-check');\n      const slotElement = check.shadowRoot.querySelector<HTMLSlotElement>('slot[name=indeterminate_icon]');\n      await expect(slotElement).toBeTruthy();\n      \n      const foundSlottedSvgElement = slotElement\n          .assignedElements()\n          .find((e) => e.tagName.toLowerCase() === 'svg');\n      await expect(foundSlottedSvgElement).toBeTruthy();\n\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Indeterminate",
          "declaration": {
            "name": "Indeterminate",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomCheckIcon",
          "declaration": {
            "name": "CustomCheckIcon",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomIndeterminateIcon",
          "declaration": {
            "name": "CustomIndeterminateIcon",
            "module": "src/check/Check.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A control that allows a user to check a value on or off.\n\n```js \nimport '@capitec/omni-components/check'; \n```",
          "name": "Check",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-check-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-check-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-check-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-check-label-font-weight"
            },
            {
              "description": "Label spacing.",
              "name": "--omni-check-label-spacing"
            },
            {
              "description": "Hint font color.",
              "name": "--omni-check-hint-label-font-color"
            },
            {
              "description": "Hint font family.",
              "name": "--omni-check-hint-label-font-family"
            },
            {
              "description": "Hint font size.",
              "name": "--omni-check-hint-label-font-size"
            },
            {
              "description": "Hint font weight.",
              "name": "--omni-check-hint-label-font-weight"
            },
            {
              "description": "Error font color.",
              "name": "--omni-check-error-label-font-color"
            },
            {
              "description": "Error font family.",
              "name": "--omni-check-error-label-font-family"
            },
            {
              "description": "Error font size.",
              "name": "--omni-check-error-label-font-size"
            },
            {
              "description": "Error font weight.",
              "name": "--omni-check-error-label-font-weight"
            },
            {
              "description": "Width.",
              "name": "--omni-check-width"
            },
            {
              "description": "Height.",
              "name": "--omni-check-height"
            },
            {
              "description": "Background color.",
              "name": "--omni-check-background-color"
            },
            {
              "description": "Border width.",
              "name": "--omni-check-border-width"
            },
            {
              "description": "Border color.",
              "name": "--omni-check-border-color"
            },
            {
              "description": "Border radius.",
              "name": "--omni-check-border-radius"
            },
            {
              "description": "Indicator Border width.",
              "name": "--omni-check-indicator-border-width"
            },
            {
              "description": "Indicator Border color.",
              "name": "--omni-check-indicator-border-color"
            },
            {
              "description": "Indicator color.",
              "name": "--omni-check-indicator-color"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-check-checked-background-color"
            },
            {
              "description": "Indeterminate Background color.",
              "name": "--omni-check-indeterminate-background-color"
            },
            {
              "description": "Disabled Background color.",
              "name": "--omni-check-disabled-background-color"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-check-disabled-border-color"
            },
            {
              "description": "Hover box shadow.",
              "name": "--omni-check-hover-box-shadow"
            },
            {
              "description": "Hover background color.",
              "name": "--omni-check-hover-background-color"
            }
          ],
          "slots": [
            {
              "description": "Replaces the icon for the indeterminate state",
              "name": "indeterminate_icon"
            },
            {
              "description": "Replaces the icon for the checked state",
              "name": "check_icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label text.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is in and indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            }
          ],
          "events": [
            {
              "name": "value-changed",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label text.",
              "fieldName": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "fieldName": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is in and indeterminate state.",
              "fieldName": "indeterminate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-check",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Check",
          "declaration": {
            "name": "Check",
            "module": "src/check/Check.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check",
          "declaration": {
            "name": "Check",
            "module": "src/check/Check.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/check/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Check.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/code/Code.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-code language=\"${ifNotEmpty(args.language)}\" data-testid=\"test-code\" header=\"${ifNotEmpty(args.header)}\" content=\"${ifNotEmpty(args.content)}\"></omni-code>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    header: '',\n    content: 'Hello',\n    language: 'html',\n  },\n  play: async (context: StoryContext) => {\n      const code = within(context.canvasElement).getByTestId<Code>('test-code');\n      await expect(code).toBeTruthy();\n\n      const htmlCodeBlock = code.shadowRoot.querySelector('.language-html');\n      await expect(htmlCodeBlock).toBeTruthy();\n\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HTML_as_content",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-code\n      language=\"${args.language}\"\n      data-testid=\"test-code\"\n      header=\"${args.header}\"\n      content=\"${args.content}\"\n    >\n    </omni-code>\n  `,\n  args: {\n    header: 'HTML',\n    content: `  \n   <div>\n     <h1>Hello World</h1>\n   </div>\n  `,\n    language: 'html',\n  },\n  play: async (context: StoryContext) => {\n      const code = within(context.canvasElement).getByTestId<Code>('test-code');\n      await expect(code).toBeTruthy();\n\n      const htmlCodeBlock = code.shadowRoot.querySelector('.language-html');\n      await expect(htmlCodeBlock).toBeTruthy();\n\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HTML_as_child_element",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-code\n      language=\"${args.language}\"\n      data-testid=\"test-code\"\n      header=\"${args.header}\"\n      content=\"${args.content}\"\n    >\n      <div>\n        <h1>Hello World</h1>\n      </div>\n    </omni-code>\n  `,\n  args: {\n    header: 'HTML as child element',\n    language: 'html',\n  },\n  play: async (context: StoryContext) => {\n      const code = within(context.canvasElement).getByTestId<Code>('test-code');\n      await expect(code).toBeTruthy();\n\n      const htmlCodeBlock = code.shadowRoot.querySelector('.language-html');\n      await expect(htmlCodeBlock).toBeTruthy();\n\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "JavaScript",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-code\n      language=\"${args.language}\"\n      data-testid=\"test-code\"\n      header=\"${args.header}\"\n      content=\"${args.content}\"\n    >\n    </omni-code>\n  `,\n  name: 'JavaScript',\n  args: {\n    header: 'JavaScript',\n    content: `  \n    alert('this is javascript');\n  `,\n    language: 'javascript',\n  },\n  play: async (context: StoryContext) => {\n      const code = within(context.canvasElement).getByTestId<Code>('test-code');\n      await expect(code).toBeTruthy();\n\n      const jsCodeBlock = code.shadowRoot.querySelector('.language-javascript');\n      await expect(jsCodeBlock).toBeTruthy();\n\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/code/Code.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/code/Code.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML_as_content",
          "declaration": {
            "name": "HTML_as_content",
            "module": "src/code/Code.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML_as_child_element",
          "declaration": {
            "name": "HTML_as_child_element",
            "module": "src/code/Code.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "JavaScript",
          "declaration": {
            "name": "JavaScript",
            "module": "src/code/Code.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/code/Code.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A control to syntax highlight and display source code.\n\n```js \nimport '@capitec/omni-components/code'; \n```",
          "name": "Code",
          "cssProperties": [
            {
              "description": "Scrollbar Width.",
              "name": "--omni-code-scrollbar-width"
            },
            {
              "description": "Scrollbar track box shadow.",
              "name": "--omni-code-scrollbar-track-box-shadow"
            },
            {
              "description": "Scrollbar track border width.",
              "name": "--omni-code-scrollbar-track-border-width"
            },
            {
              "description": "Scrollbar thumb background.",
              "name": "--omni-code-scrollbar-thumb-background"
            },
            {
              "description": "Scrollbar thumb background on hover.",
              "name": "--omni-code-scrollbar-thumb-hover-background"
            },
            {
              "description": "Scrollbar thumb border radius.",
              "name": "--omni-code-scrollbar-thumb-border-radius"
            },
            {
              "description": "Header background.",
              "name": "--omni-code-header-background"
            },
            {
              "description": "Header border radius.",
              "name": "--omni-code-header-border-radius"
            },
            {
              "description": "Header padding.",
              "name": "--omni-code-header-padding"
            },
            {
              "description": "Header border.",
              "name": "--omni-code-header-border"
            },
            {
              "description": "Header font family.",
              "name": "--omni-code-header-family"
            },
            {
              "description": "Header font weight.",
              "name": "--omni-code-header-font-weight"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "String"
              },
              "description": "Renders a small header above the block itself.",
              "attribute": "header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "language",
              "type": {
                "text": "String"
              },
              "default": "'html'",
              "description": "Programming language used, e.g. html, css, javascript, etc.",
              "attribute": "language",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "String"
              },
              "description": "Raw text to parse as content. If this property is specified, it will take precedence over slotted content. This should also be used if you are using dynamic content",
              "attribute": "content",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "_parseContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderPre",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "withTitle",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "header",
              "type": {
                "text": "String"
              },
              "description": "Renders a small header above the block itself.",
              "fieldName": "header"
            },
            {
              "name": "language",
              "type": {
                "text": "String"
              },
              "default": "'html'",
              "description": "Programming language used, e.g. html, css, javascript, etc.",
              "fieldName": "language"
            },
            {
              "name": "content",
              "type": {
                "text": "String"
              },
              "description": "Raw text to parse as content. If this property is specified, it will take precedence over slotted content. This should also be used if you are using dynamic content",
              "fieldName": "content"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Code",
          "declaration": {
            "name": "Code",
            "module": "src/code/Code.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-code",
          "declaration": {
            "name": "Code",
            "module": "src/code/Code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/code/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/code/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Code.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-hyperlink\n      data-testid=\"test-hyperlink\"\n      label=\"${ifNotEmpty(args.label)}\"\n      href=\"${ifNotEmpty(args.href)}\"\n      target=\"${ifNotEmpty(args.target)}\"\n      ?disabled=\"${args.disabled}\"\n      ?inline=\"${args.inline}\"\n      size=\"${args.size}\"\n    ></omni-hyperlink>\n  `,\n  name: 'Interactive',\n  args: {\n    label: 'Click',\n    href: '',\n    target: '',\n    disabled: false,\n    inline: false,\n    size: '',\n  },\n  play: async (context :{ canvasElement: HTMLElement;}) => {\n    const canvas = within(context.canvasElement);\n    const Hyperlink = canvas.getByTestId('test-hyperlink');\n    const click = jest.fn();\n    Hyperlink.addEventListener('click', () => click());\n    await userEvent.click(Hyperlink);\n    await userEvent.click(Hyperlink);\n    await expect(click).toBeCalledTimes(2);\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\"></omni-hyperlink>`,\n  name:'Label',\n  args: {\n    label:'Click',\n  },\n  play: async (context :{ canvasElement: HTMLElement;}) => {\n    const canvas = within(context.canvasElement);\n    const Hyperlink = canvas.getByTestId('test-hyperlink');\n    await expect(Hyperlink.shadowRoot.querySelector('a')).toHaveTextContent(Label.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Size",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" size=\"${args.size}\"></omni-hyperlink>`,\n  name:'Size',\n  args: {\n    label:'Click',\n    size:'small',\n  },\n  play: async (context :{ canvasElement: HTMLElement;}) => {\n    const canvas = within(context.canvasElement);\n    const Hyperlink = canvas.getByTestId('test-hyperlink');\n    await expect(Hyperlink).toHaveAttribute('size', Size.args.size);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Href",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" href=\"${args.href}\"></omni-hyperlink>`,\n  name: 'Href',\n  args: {\n    label:'Click',\n    href:'http://example.com'\n  },\n  play: async (context :{ canvasElement: HTMLElement;}) => {\n    const canvas = within(context.canvasElement);\n    const Hyperlink = canvas.getByTestId('test-hyperlink');\n    await expect(Hyperlink).toHaveAttribute('href', Href.args.href);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-hyperlink>`,\n  name:'Disabled',\n  args: {\n    label:'Click',\n    disabled:true,\n  },\n  play: async (context: { canvasElement: HTMLElement; }) => {\n    const canvas = within(context.canvasElement);\n\n    const Hyperlink = canvas.getByTestId('test-hyperlink');\n\n    const click = jest.fn();\n    Hyperlink.addEventListener('click', () => click());\n\n    await userEvent.click(Hyperlink);\n    await userEvent.click(Hyperlink);\n    await expect(click).toBeCalledTimes(0);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Inline",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`<p data-testid=\"test-paragraph\">Inline <omni-hyperlink label=\"${args.label}\" ?inline=\"${args.inline}\"></omni-hyperlink> example</p>`,\n  name:'Inline',\n  args: {\n    label:'click',\n    inline:true\n  },\n  play: async (context: { canvasElement: HTMLElement; }) => {\n    const canvas = within(context.canvasElement);\n\n    const paragraph = canvas.getByTestId('test-paragraph');\n    const hyperlinkElement = paragraph.querySelector<HTMLElement>('omni-hyperlink');\n\n    await expect(paragraph).toContainElement(hyperlinkElement);\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Size",
          "declaration": {
            "name": "Size",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Href",
          "declaration": {
            "name": "Href",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A link control that allows a user to indicate an action to be executed. Typically used for navigational purposes.\n\n```js \nimport '@capitec/omni-components/hyperlink'; \n```",
          "name": "Hyperlink",
          "cssProperties": [
            {
              "description": "Hyperlink disabled color.",
              "name": "--omni-hyperlink-color-disabled"
            },
            {
              "description": "Hyperlink font size.",
              "name": "--omni-hyperlink-font-size"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-family"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-weight"
            },
            {
              "description": "Hyperlink color.",
              "name": "--omni-hyperlink-color"
            },
            {
              "description": "Hyperlink text decorator",
              "name": "--omni-hyperlink-text-decorator"
            },
            {
              "description": "Hyperlink small font size variation",
              "name": "--omni-hyperlink-font-size-small"
            },
            {
              "description": "Hyperlink small font family variation",
              "name": "--omni-font-family-small"
            },
            {
              "description": "Hyperlink small font weight",
              "name": "--omni-hyperlink-font-weight-small"
            },
            {
              "description": "Hyperlink colour when in an active state.",
              "name": "--omni-hyperlink-color-active"
            },
            {
              "description": "Hyperlink text decorator in active state.",
              "name": "--omni-hyperlink-text-decorator-active"
            },
            {
              "description": "Hyperlink text decorator when in hover state.",
              "name": "--omni-hyperlink-text-decorator-hover"
            },
            {
              "description": "Hyperlink color when visited",
              "name": "--omni-hyperlink-color-visited"
            },
            {
              "description": "Hyperlink text decorator when visited.",
              "name": "--omni-hyperlink-text-decorator-visited"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label string to display.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "URL to link to. NOTE, suppresses \"click\" event if specified.",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_self\"|\"_blank\"|\"_parent\"|\"_top\"|String"
              },
              "default": "\"_self\"",
              "description": "Where to load the URL specified in \"href\": - `_self` Current browsing context. - `_blank` Usually a new tab, users can configure the browser to open a new window instead. - `_parent` Parent browsing context of the current one. If no parent, behave as \"_self\". - `_top` Topmost browsing context (the \"highest\" context thats an ancestor of the current one). If no ancestors, behaves as \"_self\".",
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the link is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the link is used as part of a sentence.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the Hyperlink text: - `default` Size variation to apply. - `small` Size variation to apply.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label string to display.",
              "fieldName": "label"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "URL to link to. NOTE, suppresses \"click\" event if specified.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_self\"|\"_blank\"|\"_parent\"|\"_top\"|String"
              },
              "default": "\"_self\"",
              "description": "Where to load the URL specified in \"href\": - `_self` Current browsing context. - `_blank` Usually a new tab, users can configure the browser to open a new window instead. - `_parent` Parent browsing context of the current one. If no parent, behave as \"_self\". - `_top` Topmost browsing context (the \"highest\" context thats an ancestor of the current one). If no ancestors, behaves as \"_self\".",
              "fieldName": "target"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the link is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the link is used as part of a sentence.",
              "fieldName": "inline"
            },
            {
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the Hyperlink text: - `default` Size variation to apply. - `small` Size variation to apply.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-hyperlink",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "linkTarget",
          "type": {
            "text": "['_self', '_blank', '_parent', '_top']"
          },
          "default": "['_self', '_blank', '_parent', '_top']"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "src/hyperlink/Hyperlink.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "src/hyperlink/Hyperlink.ts"
          }
        },
        {
          "kind": "js",
          "name": "linkTarget",
          "declaration": {
            "name": "linkTarget",
            "module": "src/hyperlink/Hyperlink.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Hyperlink.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${ifNotEmpty(args.size)}\" icon=\"${ifNotEmpty(args.icon)}\">\n      ${unsafeHTML(args.slot)}\n    </omni-icon>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    size: 'default',\n    slot: raw`<svg\n    version=\"1.1\"\n    viewBox=\"0 0 16 16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\"\n    height=\"100%\"\n  >\n    <g transform=\"translate(-2,-2)\">\n      <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n    </g>\n  </svg>`,\n    icon: undefined as string,\n  },\n  play: async (context: StoryContext) => {\n      const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n      const slotElement = icon.shadowRoot.querySelector('slot');\n      const foundSlottedSvgElement = slotElement\n          .assignedElements()\n          .find((e) => e.tagName.toLowerCase() === 'svg');\n      await expect(foundSlottedSvgElement).toBeTruthy();\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "SVG",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\"> \n      ${unsafeHTML(args.slot)} \n    </omni-icon>\n  `,\n  name: 'SVG',\n  parameters: {},\n  args: {\n    size: 'large',\n    slot: `<svg\n                version=\"1.1\"\n                viewBox=\"0 0 16 16\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"100%\"\n                height=\"100%\"\n              >\n                <g transform=\"translate(-2,-2)\">\n                  <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n                </g>\n              </svg>`,\n  },\n  play: async (context: StoryContext) => {\n      const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n      const slotElement = icon.shadowRoot.querySelector('slot');\n      const foundSlottedSvgElement = slotElement\n          .assignedElements()\n          .find((e) => e.tagName.toLowerCase() === 'svg');\n      await expect(foundSlottedSvgElement).toBeTruthy();\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "IconPath",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n  `,\n  name: 'Local Source',\n  parameters: {},\n  args: {\n    size: 'default',\n    icon: 'assets/colors.svg',\n  },\n  play: async (context: StoryContext) => {\n      const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n      const imgElement = icon.shadowRoot.querySelector('img');\n      await expect(imgElement).toBeTruthy();\n      await expect(imgElement.src.endsWith(IconPath.args.icon)).toBeTruthy();\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "URL",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n  `,\n  name: 'Remote Source',\n  parameters: {},\n  args: {\n    size: 'default',\n    icon: 'https://img.shields.io/badge/Source-remote-lightgrey.svg'\n  },\n  play: async (context: StoryContext) => {\n      const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n      const imgElement = icon.shadowRoot.querySelector('img');\n      await expect(imgElement).toBeTruthy();\n      await expect(imgElement.src).toEqual(URL.args.icon);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Material",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <!-- Add Material to your project, e.g. Adding below link in <head>-->\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n    <!-- ------------------------------------------------------------- -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"> </omni-icon>\n  `,\n  args: {\n    size: 'default',\n    icon: '@material/receipt_long'\n  },\n  play: async (context: StoryContext) => {\n      const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n      const materialElement = icon.shadowRoot.querySelector<HTMLElement>('.material-icon');\n      await expect(materialElement).toBeTruthy();\n      await expect(materialElement.innerText).toEqual(Material.args.icon.replace('@material/',''));\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SVG",
          "declaration": {
            "name": "SVG",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconPath",
          "declaration": {
            "name": "IconPath",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "URL",
          "declaration": {
            "name": "URL",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Material",
          "declaration": {
            "name": "Material",
            "module": "src/icon/Icon.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays an icon\n\n```js \nimport '@capitec/omni-components/icon'; \n```",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Icon fill color.",
              "name": "--omni-icon-fill"
            },
            {
              "description": "Icon background color.",
              "name": "--omni-icon-background-color"
            },
            {
              "description": "Icon large size.",
              "name": "--omni-icon-size-large"
            },
            {
              "description": "Icon medium size.",
              "name": "--omni-icon-size-medium"
            },
            {
              "description": "Icon small size.",
              "name": "--omni-icon-size-small"
            },
            {
              "description": "Icon extra small size.",
              "name": "--omni-icon-size-extra-small"
            },
            {
              "description": "Icon default size.",
              "name": "--omni-icon-size-default"
            }
          ],
          "slots": [
            {
              "description": "The icon to be displayed",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"default\"|\"extra-small\"|\"small\"|\"medium\"|\"large\"|string"
              },
              "default": "\"default\"",
              "description": "The size to display the icon at. Options include: - `default` Icon size is 24px. - `extra-small` Icon size is 8px. - `small` Icon size is 16px. - `medium` Icon size is 32px. - `large` Icon size is 48px.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to display. Takes preference over the slotted icon",
              "attribute": "icon",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"default\"|\"extra-small\"|\"small\"|\"medium\"|\"large\"|string"
              },
              "default": "\"default\"",
              "description": "The size to display the icon at. Options include: - `default` Icon size is 24px. - `extra-small` Icon size is 8px. - `small` Icon size is 16px. - `medium` Icon size is 32px. - `large` Icon size is 48px.",
              "fieldName": "size"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to display. Takes preference over the slotted icon",
              "fieldName": "icon"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/icon/Icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/icon/Icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Check.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A check icon component\n\n```js \nimport '@capitec/omni-components/icons/Check.icon.js'; \n```",
          "name": "CheckIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-check-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckIcon",
          "declaration": {
            "name": "CheckIcon",
            "module": "src/icons/Check.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check-icon",
          "declaration": {
            "name": "CheckIcon",
            "module": "src/icons/Check.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Indeterminate.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An indeterminate icon component\n\n```js \nimport '@capitec/omni-components/icons/Indeterminate.icon.js'; \n```",
          "name": "IndeterminateIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-indeterminate-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IndeterminateIcon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "src/icons/Indeterminate.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-indeterminate-icon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "src/icons/Indeterminate.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-label data-testid=\"test-label\" label=\"${ifNotEmpty(args.label)}\" type=\"${args.type}\"> </omni-label>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    label: 'Label',\n    type: 'default',\n  },\n  play: async (context: StoryContext) => {\n      const label = within(context.canvasElement).getByTestId<Label>('test-label');\n      await expect(label.shadowRoot).toHaveTextContent(Interactive.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Title",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label>\n  `,\n  args: {\n    label: 'Title',\n    type: 'title',\n  },\n  play: async (context: StoryContext) => {\n      const label = within(context.canvasElement).getByTestId<Label>('test-label');\n      await expect(label.shadowRoot).toHaveTextContent(Title.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Subtitle",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label>\n  `,\n  args: {\n    label: 'Subtitle',\n    type: 'subtitle',\n  },\n  play: async (context: StoryContext) => {\n      const label = within(context.canvasElement).getByTestId<Label>('test-label');\n      await expect(label.shadowRoot).toHaveTextContent(Subtitle.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Strong",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label>\n  `,\n  args: {\n    label: 'Strong',\n    type: 'strong',\n  },\n  play: async (context: StoryContext) => {\n      const label = within(context.canvasElement).getByTestId<Label>('test-label');\n      await expect(label.shadowRoot).toHaveTextContent(Strong.args.label);\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtitle",
          "declaration": {
            "name": "Subtitle",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Strong",
          "declaration": {
            "name": "Strong",
            "module": "src/label/Label.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A simple label component that renders a styled text string.\n\n```js \nimport '@capitec/omni-components/label'; \n```",
          "name": "Label",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-label-font-weight"
            },
            {
              "description": "Label cursor.",
              "name": "--omni-label-cursor"
            },
            {
              "description": "Title label font size.",
              "name": "--omni-label-title-font-size"
            },
            {
              "description": "Title label font weight.",
              "name": "--omni-label-title-font-weight"
            },
            {
              "description": "Subtitle label font size.",
              "name": "--omni-label-subtitle-font-size"
            },
            {
              "description": "Subtitle label font weight.",
              "name": "--omni-label-subtitle-font-weight"
            },
            {
              "description": "Strong label font size.",
              "name": "--omni-label-strong-font-size"
            },
            {
              "description": "Strong label font weight.",
              "name": "--omni-label-strong-font-weight"
            },
            {
              "description": "Default label font size.",
              "name": "--omni-label-default-font-size"
            },
            {
              "description": "Default label font weight.",
              "name": "--omni-label-default-font-weight"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label string to display.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"default\"|\"title\"|\"subtitle\"|\"strong\"|string"
              },
              "description": "The type of label to display: - `default` Normal font weight. - `title` Larger font and weight. - `subtitle` Larger font and weight. - `strong` Largest font and weight.",
              "default": "\"default\"",
              "attribute": "type",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label string to display.",
              "fieldName": "label"
            },
            {
              "name": "type",
              "type": {
                "text": "\"default\"|\"title\"|\"subtitle\"|\"strong\"|string"
              },
              "description": "The type of label to display: - `default` Normal font weight. - `title` Larger font and weight. - `subtitle` Larger font and weight. - `strong` Largest font and weight.",
              "default": "\"default\"",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/label/Label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-label",
          "declaration": {
            "name": "Label",
            "module": "src/label/Label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/label/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${ifNotEmpty(args.label)}\" .data=\"${args.data}\" hint=\"${ifNotEmpty(args.hint)}\" error=\"${ifNotEmpty(args.error)}\" ?checked=\"${args.checked}\" ?disabled=\"${args.disabled}\"></omni-radio>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    label: '',\n    data: {},\n    hint: '',\n    error: '',\n    checked: false,\n    disabled: false,\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      radio.focus();\n\n      const content = radio.shadowRoot.getElementById('content');\n      const valueChange = jest.fn();\n      radio.addEventListener('value-change', valueChange);\n\n      await userEvent.click(content);    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n\n      await expect(valueChange).toBeCalledTimes(2);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${args.label}\"></omni-radio>\n  `,\n  args: {\n    label: 'Label',\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      const labelElement = radio.shadowRoot.getElementById('label');\n      await expect(labelElement).toHaveTextContent(Label.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-radio>\n  `,\n  args: {\n    label: 'Hint',\n    hint: 'This is a hint'\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      const element = radio.shadowRoot.querySelector<HTMLElement>('.hint');\n      await expect(element).toHaveTextContent(Hint.args.hint);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" error=\"${args.error}\"></omni-radio>\n  `,\n  args: {\n    label: 'Error',\n    error: 'This is an error state'\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      const element = radio.shadowRoot.querySelector<HTMLElement>('.error');\n      await expect(element).toHaveTextContent(Error.args.error);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-radio>\n  `,\n  args: {\n    label: 'Checked',\n    checked: true,\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      const checkedElement = radio.shadowRoot.querySelector<HTMLElement>('.checked');\n      await expect(checkedElement).toBeTruthy();\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-radio>\n  `,\n  args: {\n    label: 'Disabled',\n    disabled: true,\n  },\n  play: async (context: StoryContext) => {\n      const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n      const valueChange = jest.fn();\n      radio.addEventListener('value-change', valueChange);\n\n      const disabledElement = radio.shadowRoot.querySelector<HTMLElement>('.disabled');\n      await expect(disabledElement).toBeTruthy();\n      \n      const content = radio.shadowRoot.getElementById('content');\n      await userEvent.click(content);    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n      await expect(valueChange).toBeCalledTimes(0);\n\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/radio/Radio.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A control that allows a user to select a single value from a small group of values.\n\n```js \nimport '@capitec/omni-components/radio'; \n```",
          "name": "Radio",
          "cssProperties": [
            {
              "description": "Width.",
              "name": "--omni-radio-width"
            },
            {
              "description": "Height.",
              "name": "--omni-radio-height"
            },
            {
              "description": "Padding.",
              "name": "--omni-radio-padding"
            },
            {
              "description": "Label Font Color.",
              "name": "--omni-label-font-color"
            },
            {
              "description": "Label Font Family.",
              "name": "--omni-label-font-family"
            },
            {
              "description": "Label Font Size.",
              "name": "--omni-label-font-size"
            },
            {
              "description": "Label Font Weight.",
              "name": "--omni-radio-label-font-weight"
            },
            {
              "description": "Label Line Height.",
              "name": "--omni-radio-label-line-height"
            },
            {
              "description": "Label Spacing.",
              "name": "--omni-radio-label-spacing"
            },
            {
              "description": "Hint Font Color.",
              "name": "--omni-input-hint-label-font-color"
            },
            {
              "description": "Hint Font Family.",
              "name": "--omni-input-hint-label-font-family"
            },
            {
              "description": "Hint Font Size.",
              "name": "--omni-input-hint-label-font-size"
            },
            {
              "description": "Hint Font Weight.",
              "name": "--omni-input-hint-label-font-weight"
            },
            {
              "description": "Error Font Color.",
              "name": "--omni-input-error-label-font-color"
            },
            {
              "description": "Error Font Family.",
              "name": "--omni-input-error-label-font-family"
            },
            {
              "description": "Error Font Size.",
              "name": "--omni-input-error-label-font-size"
            },
            {
              "description": "Error Font Weight.",
              "name": "--omni-input-error-label-font-weight"
            },
            {
              "description": "Background Color.",
              "name": "--omni-radio-background-color"
            },
            {
              "description": "Border Width.",
              "name": "--omni-radio-border-width"
            },
            {
              "description": "Border Style.",
              "name": "--omni-radio-border-style"
            },
            {
              "description": "Border Color.",
              "name": "--omni-radio-border-color"
            },
            {
              "description": "Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Border Width.",
              "name": "--omni-radio-indicator-border-width"
            },
            {
              "description": "Indicator Border Color.",
              "name": "--omni-radio-indicator-border-color"
            },
            {
              "description": "Indicator Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Color.",
              "name": "--omni-radio-indicator-color"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-radio-checked-background-color"
            },
            {
              "description": "Hover Box Shadow.",
              "name": "--omni-radio-hover-box-shadow"
            },
            {
              "description": "Hover Background Color.",
              "name": "--omni-radio-hover-background-color"
            },
            {
              "description": "Disabled Border Color.",
              "name": "--omni-radio-disabled-border-color"
            },
            {
              "description": "Disabled Background Color.",
              "name": "--omni-radio-disabled-background-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The radio label text.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The radio label text.",
              "fieldName": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "fieldName": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio/Radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio/Radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/store/Store.stories.mdx",
      "declarations": [
        {
          "kind": "function",
          "name": "PlainMD"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlainMD",
          "declaration": {
            "name": "PlainMD",
            "module": "src/store/Store.stories.mdx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/Store.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base class used to create a contextual observable store. \n\nCore concepts and capabilities include:\n- Be default store state is immutable (recommended).\n- Consumers can subscribe to store state changes via exposed RxJS Observables.\n- Store state change history can be captured and accessed (in memory only).\n- Store state changes can be logged to console.\n\n```js \nimport { Store } from '@capitec/omni-components/store'; \n```",
          "name": "Store",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "StoreStateSettings"
              },
              "privacy": "private",
              "default": "settings"
            },
            {
              "kind": "field",
              "name": "stateHistory",
              "description": "Exposes store state history only if settings had \"trackStateHistory: true\" set.",
              "type": {
                "text": "Array"
              }
            },
            {
              "kind": "field",
              "name": "stateChanged",
              "description": "Provides RxJS Observable that can be subscribed to in order to retrieve store changes.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "stateChangedWithName",
              "description": "Provides RxJS Observable that can be subscribed to in order to retrieve store changes and state name.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "stateChangedNoPayload",
              "description": "Provides RxJS Observable that can be subscribed to in order to be notified of store changes.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "stateChangedNoPayloadWithName",
              "description": "Provides RxJS Observable that can be subscribed to in order to be notified of store changes with state name.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "stateChangedProperties",
              "description": "Provides RxJS Observable that can be subscribed to in order to retrieve store changes, \nincludes properties that changed as well.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "stateChangedPropertiesWithName",
              "description": "Provides RxJS Observable that can be subscribed to in order to retrieve store changes, \nincludes properties that changed as well as state name.",
              "type": {
                "text": "Observable"
              }
            },
            {
              "kind": "field",
              "name": "getStateChangedProperties"
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "deepCloneReturnedState",
                  "default": "true",
                  "description": "When true, returns a cloned copy of the store state (recommended). \n\nNOTE: When false and the settings had \"persistence: 'memory'\", a reference to the store state will \nbe returned and it's up to the consumer to ensure the state isn't changed from the outside.",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Gets store state.",
              "return": {
                "type": {
                  "text": "Object"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStateProperty",
              "parameters": [
                {
                  "name": "propertyName",
                  "type": {
                    "text": "String"
                  },
                  "description": "Name of the property to return from the store state."
                },
                {
                  "name": "deepCloneReturnedState",
                  "default": "true",
                  "type": {
                    "text": "Boolean"
                  },
                  "description": "When true, returns a cloned copy of the store state (recommended). \n\nNOTE: When false and the settings had \"persistence: 'memory'\", a reference to the store state will \nbe returned and it's up to the consumer to ensure the state isn't changed from the outside.",
                  "optional": true
                }
              ],
              "description": "Gets store state for a given property.",
              "return": {
                "type": {
                  "text": "Object"
                }
              }
            },
            {
              "kind": "method",
              "name": "setState",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "Object|Function"
                  },
                  "description": "State to set, can be an object or a function that accepts latest state as input parameter."
                },
                {
                  "name": "action",
                  "type": {
                    "text": "String"
                  },
                  "description": "Descriptive name for state action, e.g. \"CLIENT_ADD\"."
                },
                {
                  "name": "dispatchState",
                  "default": "true",
                  "description": "When true, notifies subscribers of state changes.",
                  "optional": true,
                  "type": {
                    "text": "Boolean"
                  }
                },
                {
                  "name": "deepCloneState",
                  "default": "true",
                  "description": "When true, clones latest state before performing state update.",
                  "optional": true,
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Sets store state. \n\nNOTE: State to set MUST be serializable to and from JSON for immutability support \nand / or supported persistence mechanisms.",
              "return": {
                "type": {
                  "text": "Object"
                }
              }
            },
            {
              "kind": "method",
              "name": "clearState",
              "parameters": [
                {
                  "name": "dispatchState",
                  "default": "true",
                  "description": "When true, notifies subscribers of state changes.",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Clears store state.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "resetState",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "Object"
                  },
                  "description": "State to set."
                },
                {
                  "name": "dispatchState",
                  "default": "true",
                  "description": "When true, notifies subscribers of state changes.",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Resets store state, includes clearing store state history.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "clearStateHistory",
              "description": "Clears store state history.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dispatchState",
              "parameters": [
                {
                  "name": "stateChanges",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "persistence"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Store",
          "declaration": {
            "name": "Store",
            "module": "src/store/Store.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/StoreStateSettings.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Settings for Store constructor.",
          "name": "StoreStateSettings",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Unique name of the store, e.g. \"client-store\"."
            },
            {
              "kind": "field",
              "name": "persistence",
              "type": {
                "text": "string"
              },
              "default": "\"memory\"",
              "description": "{\"memory\"|\"sessionStorage|\"localStorage\"} [persistence=\"memory\"] Where to persist store data to:\n- \"memory\" - All state is stored in memory for the current session, i.e. it cannot survive page reloads.\n- \"sessionStorage\" - All state is stored in domain storage for the current session only, i.e it can survive page reloads as long as the tab remains open.\n- \"localStorage\" - All state is stored in local storage , i.e it can survive page reloads and browser reopen"
            },
            {
              "kind": "field",
              "name": "trackStateHistory",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "[trackStateHistory=false] When true, stores the state mutation history.\n\nNOTE this will perpetually grow memory use within the current session and usage thereof\nshould be carefully considered, if needed at all."
            },
            {
              "kind": "field",
              "name": "logStateChanges",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "[logStateChanges=false] When true, logs the state mutation history to console."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StoreStateSettings",
          "declaration": {
            "name": "StoreStateSettings",
            "module": "src/store/StoreStateSettings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Store.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./StoreStateSettings.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/Common.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/Dispatcher.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/store/internals/Dispatcher.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/LocalStoragePersister.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/store/internals/LocalStoragePersister.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/MemoryPersister.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/SessionStoragePersister.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/store/internals/SessionStoragePersister.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/State.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/store/internals/State.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store/internals/StatePersister.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ComponentStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ComponentStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch data-testid=\"test-switch\" label=\"${ifNotEmpty(args.label)}\" .data=\"${args.data}\" hint=\"${ifNotEmpty(args.hint)}\" error=\"${ifNotEmpty(args.error)}\" ?checked=\"${args.checked}\" ?disabled=\"${args.disabled}\"></omni-switch>\n  `,\n  name: 'Interactive',\n  parameters: {},\n  args: {\n    label: '',\n    data: {},\n    hint: '',\n    error: '',\n    checked: false,\n    disabled: false,\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const valueChange = jest.fn();\n      switchElement.addEventListener('value-change', valueChange);\n\n      const content = switchElement.shadowRoot.getElementById('content');\n      await userEvent.click(content);    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n\n      await expect(valueChange).toBeCalledTimes(2);\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch data-testid=\"test-switch\" label=\"${args.label}\"></omni-switch>\n  `,\n  args: {\n    label: 'Label'\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const labelElement = switchElement.shadowRoot.querySelector<HTMLElement>('.label');\n      await expect(labelElement).toHaveTextContent(Label.args.label);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-switch>\n  `,\n  args: {\n    label: 'Hint',\n    hint: 'This is a hint'\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const element = switchElement.shadowRoot.querySelector<HTMLElement>('.hint');\n      await expect(element).toHaveTextContent(Hint.args.hint);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" error=\"${args.error}\"></omni-switch>\n  `,\n  args: {\n    label: 'Error',\n    error: 'This is an error state'\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const element = switchElement.shadowRoot.querySelector<HTMLElement>('.error');\n      await expect(element).toHaveTextContent(Error.args.error);\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-switch>\n  `,\n  args: {\n    label: 'Checked',\n    checked: true,\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const checkedElement = switchElement.shadowRoot.querySelector<HTMLElement>('.checked');\n      await expect(checkedElement).toBeTruthy();\n\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "object"
          },
          "default": "{\n  render: (args: ArgTypes) => html`\n    <omni-switch\n      data-testid=\"test-switch\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-switch>\n  `,\n  args: {\n    label: 'Disabled',\n    disabled: true,\n  },\n  play: async (context: StoryContext) => {\n      const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n      const valueChange = jest.fn();\n      switchElement.addEventListener('value-change', valueChange);\n\n      const disabledElement = switchElement.shadowRoot.querySelector<HTMLElement>('.disabled');\n      await expect(disabledElement).toBeTruthy();\n      \n      const content = switchElement.shadowRoot.getElementById('content');\n      await userEvent.click(content);    \n      await fireEvent.keyDown(content, {\n        key: ' ',\n        code: 'Space',\n      });\n      await expect(valueChange).toBeCalledTimes(0);\n\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/switch/Switch.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A control that allows a user to switch a value on or off.\n\n```js \nimport '@capitec/omni-components/switch'; \n```",
          "name": "Switch",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-switch-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-switch-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-switch-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-switch-label-font-weight"
            },
            {
              "description": "Label left margin spacing.",
              "name": "--omni-switch-label-spacing"
            },
            {
              "description": "Hint text font color.",
              "name": "--omni-switch-input-hint-label-font-color"
            },
            {
              "description": "Hint text font family.",
              "name": "--omni-switch-input-hint-label-font-family"
            },
            {
              "description": "Hint text font size.",
              "name": "--omni-switch-input-hint-label-font-size"
            },
            {
              "description": "Hint text font weight.",
              "name": "--omni-switch-input-hint-label-font-weight"
            },
            {
              "description": "Error text font color.",
              "name": "--omni-switch-input-error-label-font-color"
            },
            {
              "description": "Error text font family.",
              "name": "--omni-switch-input-error-label-font-family"
            },
            {
              "description": "Error text font size.",
              "name": "--omni-switch-input-error-label-font-size"
            },
            {
              "description": "Error text font weight.",
              "name": "--omni-switch-input-error-label-font-weight"
            },
            {
              "description": "Track width.",
              "name": "--omni-switch-track-width"
            },
            {
              "description": "Track height.",
              "name": "--omni-switch-track-height"
            },
            {
              "description": "Track background color.",
              "name": "--omni-switch-track-background-color"
            },
            {
              "description": "Track checked background color.",
              "name": "--omni-switch-checked-track-background-color"
            },
            {
              "description": "Track disabled background color.",
              "name": "--omni-switch-disabled-track-background-color"
            },
            {
              "description": "Track border radius.",
              "name": "--omni-switch-track-border-radius"
            },
            {
              "description": "Track inset margins.",
              "name": "--omni-switch-track-inset"
            },
            {
              "description": "Knob height.",
              "name": "--omni-switch-knob-height"
            },
            {
              "description": "Knob width.",
              "name": "--omni-switch-knob-width"
            },
            {
              "description": "Knob background color.",
              "name": "--omni-switch-knob-background-color"
            },
            {
              "description": "Knob checked background color.",
              "name": "--omni-switch-checked-knob-background-color"
            },
            {
              "description": "Knob disabled background color.",
              "name": "--omni-switch-disabled-knob-background-color"
            },
            {
              "description": "Knob box shadow.",
              "name": "--omni-switch-knob-box-shadow"
            },
            {
              "description": "Knob hover box shadow.",
              "name": "--omni-switch-knob-hover-box-shadow"
            },
            {
              "description": "Knob checked hover box shadow.",
              "name": "--omni-switch-checked-hover-knob-box-shadow"
            },
            {
              "description": "Knob disabled hover box shadow.",
              "name": "--omni-switch-disabled-knob-box-shadow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The switch label text.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the switch checked state is changed."
            },
            {
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the switch checked state is changed.",
              "name": "value-changed"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The switch label text.",
              "fieldName": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "Object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "fieldName": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "omni-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch/Switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch/Switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/Directives.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ifNotEmpty",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Lit directive that only applies when provided value is not falsy(undefined, null, or empty string)",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifNotEmpty",
          "declaration": {
            "name": "ifNotEmpty",
            "module": "src/utils/Directives.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/StoryUtils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "loadCssProperties",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "cssDeclarations",
              "default": "undefined",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadThemeVariablesRemote"
        },
        {
          "kind": "function",
          "name": "loadCssPropertiesRemote",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "cssDeclarations",
              "default": "undefined",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsRemote",
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleForRemote",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadSlotForRemote",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadSlotForModule",
          "return": {
            "type": {
              "text": "{ name: string; description: string }"
            }
          },
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotForRemote",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotForModule",
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "assignToSlot",
          "parameters": [
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "rawHtml",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "markdownCode",
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "''",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "markdownCodeRemote",
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "''",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadThemesListRemote"
        },
        {
          "kind": "function",
          "name": "formatMarkdownCodeElements",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "'js'",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterJsDocLinks",
          "parameters": [
            {
              "name": "jsdoc",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "raw",
          "parameters": [
            {
              "name": "strings",
              "type": {
                "text": "TemplateStringsArray"
              }
            }
          ],
          "description": "Interprets a template literal as a raw HTML string.\n\n```ts\nconst header = (title: string) => raw`<h1>${title}</h1>`;\n```\n\nThe `raw` tag returns a string that can be used directly as ```innerHTML``` or as ```unsafeHTML``` via lit."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "loadCustomElementsRemote",
          "declaration": {
            "name": "loadCustomElementsRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleFor",
          "declaration": {
            "name": "loadCustomElementsModuleFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleForRemote",
          "declaration": {
            "name": "loadCustomElementsModuleForRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotFor",
          "declaration": {
            "name": "loadSlotFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotForModule",
          "declaration": {
            "name": "loadSlotForModule",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotForRemote",
          "declaration": {
            "name": "loadSlotForRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotFor",
          "declaration": {
            "name": "loadDefaultSlotFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotForRemote",
          "declaration": {
            "name": "loadDefaultSlotForRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotForModule",
          "declaration": {
            "name": "loadDefaultSlotForModule",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCssPropertiesRemote",
          "declaration": {
            "name": "loadCssPropertiesRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCssProperties",
          "declaration": {
            "name": "loadCssProperties",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadThemeVariablesRemote",
          "declaration": {
            "name": "loadThemeVariablesRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCode",
          "declaration": {
            "name": "markdownCode",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCodeRemote",
          "declaration": {
            "name": "markdownCodeRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadThemesListRemote",
          "declaration": {
            "name": "loadThemesListRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterJsDocLinks",
          "declaration": {
            "name": "filterJsDocLinks",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatMarkdownCodeElements",
          "declaration": {
            "name": "formatMarkdownCodeElements",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "assignToSlot",
          "declaration": {
            "name": "assignToSlot",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "raw",
          "declaration": {
            "name": "raw",
            "module": "src/utils/StoryUtils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/Utilities.stories.mdx",
      "declarations": [
        {
          "kind": "function",
          "name": "PlainMD"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlainMD",
          "declaration": {
            "name": "PlainMD",
            "module": "src/utils/Utilities.stories.mdx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/Utilities.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getValue",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Object"
              },
              "description": "Object to retrieve value from."
            },
            {
              "name": "path",
              "type": {
                "text": "String"
              },
              "description": "Path to nested value, e.g. \"food.fruit.apple\"."
            },
            {
              "name": "separator",
              "default": "`.`",
              "description": "Separator to the path split on.",
              "optional": true,
              "type": {
                "text": "String"
              }
            }
          ],
          "description": "Retrieves the value from the object in a nested fashion. Specify a path as e.g. \"food.fruit.apple\". Click [here](https://hackernoon.com/accessing-nested-objects-in-javascript-f02f1bd6387f) for more info.",
          "return": {
            "type": {
              "text": "*"
            }
          }
        },
        {
          "kind": "function",
          "name": "setValue",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Object"
              },
              "description": "Object to set value on."
            },
            {
              "name": "path",
              "type": {
                "text": "String"
              },
              "description": "Path to nested value, e.g. \"food.fruit.apple\"."
            },
            {
              "name": "value",
              "type": {
                "text": "*"
              },
              "description": "Value to set for the path."
            },
            {
              "name": "separator",
              "default": "'.'",
              "description": "Separator to the path split on.",
              "optional": true,
              "type": {
                "text": "String"
              }
            }
          ],
          "description": "Assigns the value to the object in a nested fashion.\nSpecify a path as e.g. \"food.fruit.apple\".",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "hasValue",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Number|String|Object"
              },
              "description": "Value to check"
            }
          ],
          "description": "Check if the current value is non-null or non-undefined",
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "groupBy",
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "Array"
              },
              "description": "Array to group."
            },
            {
              "name": "target",
              "type": {
                "text": "String|Function"
              },
              "description": "Grouping target:\n- ```String``` as property to group on, e.g. \"userId\"\n- ```Function``` as [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Syntax) callback function."
            }
          ],
          "description": "Group by method for an array.",
          "return": {
            "type": {
              "text": "Object"
            }
          }
        },
        {
          "kind": "function",
          "name": "isFunction",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "*"
              },
              "description": "Value to inspect."
            }
          ],
          "description": "Determines if the given value is a [function](https://developer.mozilla.org/en-US/docs/Glossary/Function).",
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "isObject",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "*"
              },
              "description": "Value to inspect."
            }
          ],
          "description": "Determines if a given value is an Object.",
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "isEmptyObject",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "*"
              },
              "description": "Value to inspect"
            }
          ],
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "isString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "text": "*"
              },
              "description": "Value to inspect"
            }
          ],
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "isPromise",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "*"
              },
              "description": "Value to inspect."
            }
          ],
          "description": "Determines if a given value is a Promise.",
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "formatBytes",
          "parameters": [
            {
              "name": "bytes",
              "type": {
                "text": "Number"
              },
              "description": "Size passed in."
            },
            {
              "name": "decimals",
              "default": "2",
              "description": "Number of decimals to return. Default to 2",
              "type": {
                "text": "Number"
              }
            }
          ],
          "description": "Returns a formatted string with easier to read values for file sizes",
          "return": {
            "type": {
              "text": "String"
            }
          }
        },
        {
          "kind": "function",
          "name": "deepCopy",
          "parameters": [
            {
              "name": "inObject",
              "type": {
                "text": "*"
              },
              "description": "Object or Array to clone."
            }
          ],
          "description": "Creates and returns a deep copy of an Object or Array.",
          "return": {
            "type": {
              "text": "*"
            }
          }
        },
        {
          "kind": "function",
          "name": "isURL",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "Item to check"
            }
          ],
          "description": "Determines if a given string is a Url.",
          "return": {
            "type": {
              "text": "Boolean"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getValue",
          "declaration": {
            "name": "getValue",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "setValue",
          "declaration": {
            "name": "setValue",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "hasValue",
          "declaration": {
            "name": "hasValue",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "groupBy",
          "declaration": {
            "name": "groupBy",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isFunction",
          "declaration": {
            "name": "isFunction",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isObject",
          "declaration": {
            "name": "isObject",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEmptyObject",
          "declaration": {
            "name": "isEmptyObject",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isString",
          "declaration": {
            "name": "isString",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPromise",
          "declaration": {
            "name": "isPromise",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatBytes",
          "declaration": {
            "name": "formatBytes",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "deepCopy",
          "declaration": {
            "name": "deepCopy",
            "module": "src/utils/Utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "isURL",
          "declaration": {
            "name": "isURL",
            "module": "src/utils/Utilities.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Utilities.js"
          }
        }
      ]
    }
  ]
}
